pool:
  vmImage: ubuntu-latest
trigger: 
- feature-ms-raulRiquelme-labFinal 
stages:
- stage: Build
  jobs:
  - job: build
    displayName: Build
    steps:
    - task: Gradle@3
      displayName: 'Build'
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'build jacocoTestReport'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        sonarQubeRunAnalysis: false
        spotBugsAnalysis: true
    - task: CopyFiles@2
      displayName: 'Prepare artifact'
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)'
        contents: |
            **/build/libs/*.jar
            **/build/**/*.xml
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifact'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: appJar
        publishLocation: 'Container'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'appJar'
        downloadPath: '$(Pipeline.Workspace)'
      displayName: Descarga Jar
- stage: Test
  jobs:
  - job: sonar
    displayName: Code Review
    steps:
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'Sonarcloud'
        organization: 'fundamentos-devops-usach'
        #scannerMode: 'MSBuild'
        projectKey: 'Fundamentos-DevOps-Usach_microservicio-spring'
        projectName: 'microservicio-spring'
        extraProperties: |
            sonar.coverage.jacoco.xmlReportPaths=$(Pipeline.Workspace)/appJar/build/reports/jacoco/test/jacocoTestReport.xml
    - task: Gradle@3
      inputs:
          gradleWrapperFile: 'gradlew'
          tasks: 'build jacocoTestReport'
          javaHomeOption: 'JDKVersion'
          sonarQubeRunAnalysis: true
          sqGradlePluginVersionChoice: 'specify'
          sonarQubeGradlePluginVersion: '3.3'
      displayName: 'SonarQube run'
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
    - task: sonarcloud-buildbreaker@2
      inputs:
        SonarCloud: 'Sonarcloud'
        organization: 'fundamentos-devops-usach'
- stage: Deploy
  jobs:
  - job: buildImage
    steps: 
    - task: DownloadBuildArtifacts@0
      inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'appJar'
          downloadPath: '$(Pipeline.Workspace)'
      
    - script: 'mkdir -p build/libs; mv $(Pipeline.Workspace)/appJar/build/libs/ build/; chmod -R 555 build/libs'
      displayName: 'Artifact prepare' 
    - task: Docker@2
      displayName: login DockerHub
      inputs:
        containerRegistry: 'DockerRegistryFundamentosDevOps'
        command: 'login'
    - task: Docker@2
      displayName: build and push image
      inputs:
        containerRegistry: 'DockerRegistryFundamentosDevOps'
        repository: 'mawidanche/fundamentos-dev-ops-usach'
        command: 'buildAndPush'
        tags: |
              v$(Build.BuildId)
              latest
        Dockerfile: '**/Dockerfile'
        
  # - job: infrastructura
  #   dependsOn: buildImage
  #   steps:     
  #   - task: TerraformInstaller@0
  #     inputs:
  #       terraformVersion: '1.2.3'
  #     displayName: Instalacion Terraform

  #   - script: |
  #         ssh-keygen -t rsa -b 4096 -N "VeryStrongSecret123!" -C "$(CORREO)" -q -f ~/.ssh/id_rsa
  #         SSH_KEY=$(cat ~/.ssh/id_rsa.pub)
  #         echo $SSH_KEY
  #         echo "##vso[task.setvariable variable=SET_SSH;isOutput=true]$SSH_KEY"
  #     name: setssh
  #     displayName: Configuracion SSH
  #   - task: TerraformCLI@0
  #     inputs:
  #       command: 'init'
  #       backendType: 'azurerm'
  #       backendServiceArm: 'azureSubscription'
  #       allowTelemetryCollection: true
  #     displayName: Terraform init
  #     continueOnError: true
  #   - task: TerraformCLI@0
  #     inputs:
  #       command: 'plan'
  #       environmentServiceName: 'azureSubscription'
  #       commandOptions: '-var ssh_key="$(setssh.SET_SSH)" -var serviceprinciple_id="$(serviceprinciple_id)" -var serviceprinciple_key="$(serviceprinciple_key)" -var tenant_id="$(tenant_id)" -var subscription_id="$(subscription_id)"'
  #       allowTelemetryCollection: true
  #     displayName: Terraform plan
  #     continueOnError: true
  #   - task: TerraformCLI@0
  #     inputs:
  #       command: 'import'
  #       environmentServiceName: 'azureSubscription'
  #       runAzLogin: true
  #       commandOptions: '-var ssh_key="$(setssh.SET_SSH)" -var serviceprinciple_id="$(serviceprinciple_id)" -var serviceprinciple_key="$(serviceprinciple_key)" -var tenant_id="$(tenant_id)" -var subscription_id="$(subscription_id)"'
  #       allowTelemetryCollection: true
  #       resourceAddress: 'module.cluster.azurerm_resource_group.aks-getting-started'
  #     continueOnError: true
  #     displayName: Terraform import
      
  #   - task: TerraformCLI@0
  #     inputs:
  #       command: 'apply'
  #       environmentServiceName: 'azureSubscription'
  #       runAzLogin: true
  #       commandOptions: '-var ssh_key="$(setssh.SET_SSH)" -var serviceprinciple_id="$(serviceprinciple_id)" -var serviceprinciple_key="$(serviceprinciple_key)" -var tenant_id="$(tenant_id)" -var subscription_id="$(subscription_id)"'
  #       allowTelemetryCollection: true
  #     displayName: Terraform apply
  #     continueOnError: true

  - job: AKS
    dependsOn: buildImage
    steps:
    - task: KubectlInstaller@0
      inputs:
        kubectlVersion: 'latest'
    - task: Kubernetes@1
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'azureSubscription'
        azureResourceGroup: 'DevOpsFoundation'
        kubernetesCluster: 'labFinal'
        namespace: 'default'
        command: 'login'
    - task: Kubernetes@1
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'azureSubscription'
        azureResourceGroup: 'DevOpsFoundation'
        kubernetesCluster: 'labFinal'
        command: 'apply'
        arguments: '-f kubernetes/deployment-app.yaml'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
        azureSubscriptionEndpointForSecrets: 'azureSubscription'
    - task: Kubernetes@1
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: 'azureSubscription'
        azureResourceGroup: 'DevOpsFoundation'
        kubernetesCluster: 'labFinal'
        namespace: 'default'
        command: 'expose'
        arguments: 'deployment labFinal-deployment --type=LoadBalancer --name=labFinal'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
        azureSubscriptionEndpointForSecrets: 'azureSubscription'
    - script: |
          ipApp=$(kubectl get services labFinal --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo $ipApp
          URLApp=http://$ipApp:8085
          echo $URLApp
          echo "##vso[task.setvariable variable=appDeploy;isOutput=true]$URLApp"
      name: getip
      displayName: Get IP